package merge

import (
	"io/ioutil"
	"reflect"
	"testing"
)

func TestPrint(t *testing.T) {
	type args struct {
		x int
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{
			name: "1",
			args: args{
				x: 1,
			},
		},
		{
			name: "3",
			args: args{
				x: 3,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			//if got := Print(tt.args.x); got != tt.want {
			//	t.Errorf("Print() = %v, want %v", got, tt.want)
			//}
		})
	}
}

func TestGetMap(t *testing.T) {
	main1, err := ioutil.ReadFile("./test/main1.go")
	if err != nil {
		return
	}
	main2, err := ioutil.ReadFile("./test/main2.go")
	if err != nil {
		return
	}
	type args struct {
		str1 string
		str2 string
	}
	tests := []struct {
		name string
		args args
		want map[int]int
	}{
		{
			name: "change",
			args: args{
				str1: `a
b
c
d`,
				str2: `a
b
cc
d`,
			},
			want: map[int]int{
				1: 1,
				2: 2,
				4: 4,
			},
		},
		{
			name: "insert",
			args: args{
				str1: `a
b
d`,
				str2: `a
b
c
d`,
			},
			want: map[int]int{
				1: 1,
				2: 2,
				3: 4,
			},
		},
		{
			name: "delete",
			args: args{
				str1: `a
b
c
d`,
				str2: `a
b
d`,
			},
			want: map[int]int{
				1: 1,
				2: 2,
				4: 3,
			},
		},
		{ //如果旧字符串最后一行跟新的不一致，会导致最后一组diff结果不太对，insert连到了一起，不过小问题
			name: "insert and delete",
			args: args{
				str1: string(main1),
				str2: string(main2),
			},
			want: map[int]int{
				1:  1,
				2:  2,
				3:  3,
				4:  4,
				6:  6,
				7:  7,
				8:  8,
				11: 11,
				12: 12,
				13: 15,
				14: 16,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := GetLineMap(tt.args.str1, tt.args.str2); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("GetLineMap() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestGetLineMap(t *testing.T) {
	type args struct {
		str1 string
		str2 string
	}
	tests := []struct {
		name string
		args args
		want map[int]int
	}{
		{
			name: "",
			args: args{
				str1: "package controller\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"git.xiaojukeji.com/Elvish/elvish-lib-golang/datetimeutil\"\n\t\"git.xiaojukeji.com/Elvish/elvish-lib-golang/localeutil\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/common/consts\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/common/dto\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/common/dto/bff\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/common/dto/drawer\"\n\tthirdProxyDto \"git.xiaojukeji.com/guarana/dive-app-g/common/dto/third_proxy\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/common/handlers/conf\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/common/handlers/copywriter\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/common/handlers/log\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/common/handlers/redis\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/common/util\"\n\tmiddleware2 \"git.xiaojukeji.com/guarana/dive-app-g/middleware\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/third_proxy\"\n\t\"git.xiaojukeji.com/nuwa/binding\"\n\t\"git.xiaojukeji.com/nuwa/golibs/httpserver\"\n\t\"git.xiaojukeji.com/nuwa/golibs/httpserver/middleware\"\n\t\"go.intra.xiaojukeji.com/platform-ha/onekey-degrade_sdk_go/degrade\"\n)\n\ntype BaseController struct {\n\thttpserver.BaseController\n}\n\nvar TicketErr = errors.New(\"ticket empty\")\n\nfunc (baseController *BaseController) CheckBasicDriverInfo(ctx context.Context, driverInfo dto.BasicDriverInfo) (dto.BasicDriverInfo, error) {\n\tlogMap := map[string]interface{}{\n\t\tconsts.LogCallee: \"check_driver_info\",\n\t\tconsts.LogParam:  driverInfo,\n\t}\n\tvar checkDriverInfoErr error\n\n\tdefer func() {\n\t\tif checkDriverInfoErr != nil {\n\t\t\tlogMap[consts.LogErrMsg] = checkDriverInfoErr.Error()\n\t\t\tlog.Trace.Errorf(ctx, consts.CheckDriverInfoFailed, \"%s\", log.BuildLogByMap(logMap))\n\t\t\treturn\n\t\t}\n\t}()\n\n\t//校验司机ID是否存在\n\tif driverInfo.DriverId == 0 {\n\t\tcheckDriverInfoErr = errors.New(\"driver_id not exist\")\n\t\treturn driverInfo, checkDriverInfoErr\n\t}\n\n\t//请求司机系统获取司机基础信息\n\tdriverSystemInfo, err := third_proxy.GetDriverInfo(ctx, driverInfo.DriverId)\n\tif err != nil {\n\t\tcheckDriverInfoErr = err\n\t\treturn driverInfo, checkDriverInfoErr\n\t}\n\n\tif driverInfo.CountryCode == \"\" { //如果国家码为空，则选择司机注册的国家\n\t\tdriverInfo.CountryCode = driverSystemInfo.DriverBiz.CountryCode\n\t}\n\n\t//获取司机注册城市\n\tdriverAreaIdInt, err := strconv.ParseInt(driverSystemInfo.DriverBiz.AreaId, 10, 64)\n\tif err != nil {\n\t\tcheckDriverInfoErr = err\n\t\treturn driverInfo, checkDriverInfoErr\n\t}\n\tdriverInfo.AreaId = driverAreaIdInt\n\n\t//如果没有locale，则根据国家码获取\n\tif driverInfo.Locale == \"\" {\n\t\tlocale, err := localeutil.GetLocaleByCountry(driverSystemInfo.DriverBiz.CountryCode)\n\t\tif err != nil {\n\t\t\tcheckDriverInfoErr = err\n\t\t\treturn driverInfo, checkDriverInfoErr\n\t\t}\n\t\tdriverInfo.Locale = locale\n\t}\n\n\t//如果没有lang，根据国家码获取\n\tif driverInfo.Lang == \"\" {\n\t\tlang, err := localeutil.GetLanguageByCountry(driverSystemInfo.DriverBiz.CountryCode)\n\t\tif err != nil {\n\t\t\tcheckDriverInfoErr = err\n\t\t\treturn driverInfo, checkDriverInfoErr\n\t\t}\n\t\tdriverInfo.Lang = lang\n\t}\n\n\t//如果定位城市为空，则根据司机当前定位城市获取\n\tif driverInfo.CurrentArea == 0 {\n\t\tareaInfo, err := third_proxy.GetDriverLocationCity(ctx, driverInfo.DriverId)\n\t\tif err != nil {\n\t\t\tcheckDriverInfoErr = err\n\t\t\treturn driverInfo, checkDriverInfoErr\n\t\t}\n\t\tareaId, err := util.Int2int64(int(areaInfo.Cityid))\n\t\tif err != nil {\n\t\t\tcheckDriverInfoErr = err\n\t\t\treturn driverInfo, checkDriverInfoErr\n\t\t}\n\t\tdriverInfo.CurrentArea = areaId\n\t}\n\n\treturn driverInfo, nil\n}\n\nfunc (baseController *BaseController) FormatH5DriverInfo(ctx *context.Context, r *http.Request, reqLang *string) (dto.DriverInfo, error) {\n\tlogMap := map[string]interface{}{\n\t\tconsts.LogCallee: \"format_h5_driver_info\",\n\t}\n\n\tvar driverInfo dto.DriverInfo\n\tvar formatDriverInfoErr error\n\n\tdefer func() {\n\t\tif formatDriverInfoErr != nil {\n\t\t\tlogMap[consts.LogErrMsg] = formatDriverInfoErr.Error()\n\t\t\tlog.Trace.Errorf(*ctx, consts.FormatDriverInfoFailed, \"%s\", log.BuildLogByMap(logMap))\n\t\t\treturn\n\t\t}\n\t}()\n\tvar err error\n\n\t//获取driver_id\n\tvar driverId int64\n\t//判断real_driver_id是否存在，不存在则请求passport\n\tdriverId = 0\n\tdriverIdStr := r.FormValue(\"real_driver_id\")\n\tif driverIdStr != \"\" {\n\t\tdriverId, err = strconv.ParseInt(driverIdStr, 10, 64)\n\t\tif err != nil {\n\t\t\tlog.Trace.Errorf(*ctx, consts.ParseFailed, \"%s\", log.BuildLogByMap(logMap))\n\t\t\tdriverId = 0\n\t\t}\n\t}\n\n\t//从请求中获取driver_id失败\n\tif driverId == 0 {\n\t\tticket := r.FormValue(\"ticket\")\n\t\tif ticket == \"\" {\n\t\t\tticket = r.FormValue(\"token\")\n\t\t}\n\n\t\tif ticket == \"\" {\n\t\t\tformatDriverInfoErr = TicketErr\n\t\t\treturn driverInfo, formatDriverInfoErr\n\t\t}\n\n\t\tvalidateResult, err := third_proxy.ValidateTicket(*ctx, ticket)\n\t\tif (err != nil) || (validateResult.Uid == nil) {\n\t\t\tformatDriverInfoErr = TicketErr\n\t\t\treturn driverInfo, formatDriverInfoErr\n\t\t}\n\n\t\tdriverId = *validateResult.Uid\n\t}\n\n\t//请求司机系统获取司机信息\n\tdriverSystemInfo, err := third_proxy.GetDriverInfo(*ctx, driverId)\n\tif err != nil {\n\t\tformatDriverInfoErr = err\n\t\treturn driverInfo, formatDriverInfoErr\n\t}\n\n\tappVersion := r.FormValue(\"appversion\")\n\n\t//获取定位的城市ID\n\tvar areaId int64\n\tvar utcOffset int32\n\tutcOffsetStr := r.FormValue(\"utc_offset\")\n\tareaIdStr := r.FormValue(\"location_cityid\")\n\t//如果未传入司机当前位置,查询locsvr\n\tif (areaIdStr == \"\") || (areaIdStr == \"0\") {\n\t\tareaInfo, err := third_proxy.GetDriverLocationCity(*ctx, driverId)\n\t\tif err != nil {\n\t\t\tformatDriverInfoErr = err\n\t\t\treturn driverInfo, formatDriverInfoErr\n\t\t}\n\t\tareaId, err = util.Int2int64(int(areaInfo.Cityid))\n\t\tif err != nil {\n\t\t\tformatDriverInfoErr = err\n\t\t\treturn driverInfo, formatDriverInfoErr\n\t\t}\n\t\tutcOffset = *areaInfo.TimeZone.UtcOffset\n\t} else {\n\t\t//格式异常，通过司机定位获取当前城市\n\t\tareaId, err = strconv.ParseInt(areaIdStr, 10, 64)\n\t\tif err != nil {\n\t\t\tareaInfo, err := third_proxy.GetDriverLocationCity(*ctx, driverId)\n\t\t\tif err != nil {\n\t\t\t\tformatDriverInfoErr = err\n\t\t\t\treturn driverInfo, formatDriverInfoErr\n\t\t\t}\n\t\t\tareaId, err = util.Int2int64(int(areaInfo.Cityid))\n\t\t\tif err != nil {\n\t\t\t\tformatDriverInfoErr = err\n\t\t\t\treturn driverInfo, formatDriverInfoErr\n\t\t\t}\n\t\t}\n\t\tutcOffsetInt, err := strconv.Atoi(utcOffsetStr)\n\t\tif err != nil {\n\t\t\tutcOffset = 0\n\t\t} else {\n\t\t\tutcOffset = int32(utcOffsetInt)\n\t\t}\n\t}\n\n\t//获取语言\n\tlang, ok := (*ctx).Value(middleware.LanguageKey).(string)\n\tif !ok || (len(lang) == 0) {\n\t\t//语言没有传入，默认使用账号归属的国家的语言\n\t\tlang, err = localeutil.GetLanguageByCountry(driverSystemInfo.DriverBiz.CountryCode)\n\t\tif err != nil {\n\t\t\tformatDriverInfoErr = err\n\t\t\treturn driverInfo, formatDriverInfoErr\n\t\t}\n\t}\n\t*reqLang = lang //赋值给外层\n\n\t//获取locale\n\tlocale := r.FormValue(\"locale\")\n\n\t//如果未传入locale，则使用国家码兜底\n\tif locale == \"\" {\n\t\tlocale, err = localeutil.GetLocaleByCountry(driverSystemInfo.DriverBiz.CountryCode)\n\t\tif err != nil {\n\t\t\tformatDriverInfoErr = err\n\t\t\treturn driverInfo, formatDriverInfoErr\n\t\t}\n\t}\n\n\t//获取电话\n\tvar cell string\n\tuserInfo, err := third_proxy.GetUserInfoByUid(*ctx, driverId)\n\tif err != nil {\n\t\tcell = \"\"\n\t} else {\n\t\tcell = *(userInfo.Cell)\n\t}\n\n\t//获取司机所在城市\n\tdriverAreaIdInt, err := strconv.ParseInt(driverSystemInfo.DriverBiz.AreaId, 10, 64)\n\tif err != nil {\n\t\tformatDriverInfoErr = err\n\t\treturn driverInfo, formatDriverInfoErr\n\t}\n\n\tcurrentLocalTime, err := datetimeutil.FormatSimple(areaId, time.Now().Unix(), datetimeutil.STYLE_YMDHMS.Pattern)\n\tif err != nil {\n\t\tformatDriverInfoErr = err\n\t\treturn driverInfo, formatDriverInfoErr\n\t}\n\thelpInfo := map[string]interface{}{\n\t\t\"driver_id\":          driverId,\n\t\t\"current_local_time\": currentLocalTime,\n\t}\n\t*ctx = context.WithValue(*ctx, middleware2.HelpInfoKey, helpInfo)\n\n\treturn dto.DriverInfo{\n\t\tBasicDriverInfo: dto.BasicDriverInfo{\n\t\t\tDriverId:    driverId,\n\t\t\tLang:        lang,\n\t\t\tAreaId:      driverAreaIdInt,\n\t\t\tAppVersion:  appVersion,\n\t\t\tLocale:      locale,\n\t\t\tCountryCode: driverSystemInfo.DriverBiz.CountryCode,\n\t\t\tCurrentArea: areaId,\n\t\t},\n\t\tWorkTime:     driverSystemInfo.DriverBiz.WorkTime,\n\t\tJoinModel:    driverSystemInfo.DriverBiz.JoinModel,\n\t\tCarLevel:     driverSystemInfo.DriverBiz.CarLevel,\n\t\tReceiveLevel: baseController.getReceiveLevel(*ctx, driverSystemInfo),\n\t\tPhone:        cell,\n\t\tCurrentUtc:   utcOffset,\n\t}, nil\n}\n\nfunc (baseController *BaseController) getReceiveLevel(ctx context.Context, driverSystemInfo thirdProxyDto.DriverInfoForSystem) []string {\n\tvar calLevel []string\n\tvar receiveLevel []string\n\tvar levelModel []string\n\tif driverSystemInfo.DriverBiz.CarLevel != \"\" {\n\t\tcalLevel = strings.Split(driverSystemInfo.DriverBiz.CarLevel, \",\")\n\t}\n\tif driverSystemInfo.DriverBiz.ReceiveLevel != \"\" {\n\t\treceiveLevel = strings.Split(driverSystemInfo.DriverBiz.ReceiveLevel, \",\")\n\t}\n\tif driverSystemInfo.DriverBiz.LevelModeSwitch != \"\" {\n\t\tlevelModeInfo := make(map[string]interface{})\n\t\terr := json.Unmarshal([]byte(driverSystemInfo.DriverBiz.LevelModeSwitch), &levelModeInfo)\n\t\tif err == nil {\n\t\t\tif _, ok := levelModeInfo[\"level\"]; ok {\n\t\t\t\tlevelByte, err := json.Marshal(levelModeInfo[\"level\"])\n\t\t\t\tif err == nil {\n\t\t\t\t\terr = json.Unmarshal(levelByte, &levelModel)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tlog.PrintLogInfo(ctx, err, consts.JsonUnMarshalFailed, log.UnPrintTag, make(map[string]interface{}))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tresult := append(calLevel, receiveLevel...)\n\tresult = append(result, levelModel...)\n\treturn util.SliceUnique(result)\n}\n\nfunc (baseController *BaseController) GetH5RespByErrno(ctx context.Context, errno int, data interface{}, lang string) dto.Response {\n\tvar errMsg string\n\tvar err error\n\tif _, ok := consts.I18nRespMsg[errno]; ok {\n\t\terrMsgKey := consts.I18nRespMsg[errno]\n\t\terrMsg, err = copywriter.GetWriterByKey(ctx, errMsgKey, lang)\n\t\tif err == nil {\n\t\t\treturn dto.Response{\n\t\t\t\tErrno:  errno,\n\t\t\t\tErrMsg: errMsg,\n\t\t\t\tData:   data,\n\t\t\t}\n\t\t} else {\n\t\t\terrno = consts.RespFailedCode\n\t\t}\n\t}\n\n\terrMsg = \"\"\n\tif _, ok := consts.RespMsg[errno]; ok {\n\t\terrMsg = consts.RespMsg[errno]\n\t}\n\n\treturn dto.Response{\n\t\tErrno:  errno,\n\t\tErrMsg: errMsg,\n\t\tData:   data,\n\t}\n}\n\nfunc (baseController *BaseController) GetRespByErrno(errno int, data interface{}) dto.Response {\n\tvar errMsg string\n\n\terrMsg = \"\"\n\tif _, ok := consts.RespMsg[errno]; ok {\n\t\terrMsg = consts.RespMsg[errno]\n\t}\n\n\treturn dto.Response{\n\t\tErrno:  errno,\n\t\tErrMsg: errMsg,\n\t\tData:   data,\n\t}\n}\n\nfunc (baseController *BaseController) ReturnH5Resp(ctx context.Context, w http.ResponseWriter, r *http.Request, data map[string]interface{}, errno int, lang string) {\n\tif lang == \"\" { //为空默认使用英语\n\t\tlang = \"en_us\"\n\t}\n\n\thelpInfo := ctx.Value(middleware2.HelpInfoKey)\n\tif helpInfo != nil {\n\t\tdata[\"help_info\"] = helpInfo\n\t}\n\n\tbaseController.EchoJSON(w, r, baseController.GetH5RespByErrno(ctx, errno, data, lang))\n}\n\nfunc (baseController *BaseController) ReturnResp(w http.ResponseWriter, r *http.Request, data interface{}, errno int) {\n\tbaseController.EchoJSON(w, r, baseController.GetRespByErrno(errno, data))\n}\n\nfunc (baseController *BaseController) DegradeControllerMethod(ctx context.Context, methodName string) bool {\n\tlogMap := map[string]interface{}{\n\t\tconsts.LogCallee: \"degrade_controller_method\",\n\t\t\"method_name\":    methodName,\n\t\t\"is_limit\":       \"activity_method_is_limited\",\n\t}\n\tvar degradeMethodErr error\n\n\tdefer func() {\n\t\tif degradeMethodErr != nil {\n\t\t\tlogMap[consts.LogErrMsg] = degradeMethodErr.Error()\n\t\t\tlog.Trace.Errorf(ctx, consts.DegradeMethodFailed, \"%s\", log.BuildLogByMap(logMap))\n\t\t}\n\t}()\n\n\tvar contextLimit = degrade.NewContext()\n\tinitDegradeErr := contextLimit.Add(degrade.METHOD, methodName)\n\tif initDegradeErr != nil {\n\t\tdegradeMethodErr = initDegradeErr\n\t\treturn false\n\t}\n\n\tinitDegradeErr = contextLimit.Add(degrade.USN, consts.DiveAppDefaultUsn)\n\tif initDegradeErr != nil {\n\t\tdegradeMethodErr = initDegradeErr\n\t\treturn false\n\t}\n\n\tinitDegradeErr = contextLimit.Add(degrade.SID, consts.DiveAppDefaultPid)\n\tif initDegradeErr != nil {\n\t\tdegradeMethodErr = initDegradeErr\n\t\treturn false\n\t}\n\n\tlimitNode := conf.Viper.GetString(\"degrade.limit_node\")\n\tisLimit, err := degrade.RateLimitAllow(limitNode, contextLimit)\n\tif err != nil {\n\t\tdegradeMethodErr = err\n\t\treturn false\n\t}\n\n\treturn !isLimit\n\n}\n\nfunc (baseController *BaseController) SetDegradeMethodDataCache(ctx context.Context, methodName string, params interface{}, data interface{}) {\n\tlogMap := map[string]interface{}{\n\t\tconsts.LogCallee: \"set_degrade_method_data_cache\",\n\t\t\"method_name\":    methodName,\n\t\tconsts.LogParam:  params,\n\t}\n\tvar setDegradeMethodDataErr error\n\tdefer func() {\n\t\tif setDegradeMethodDataErr != nil {\n\t\t\tlogMap[consts.LogErrMsg] = setDegradeMethodDataErr.Error()\n\t\t\tlog.Trace.Errorf(ctx, consts.SetDegradeMethodDataCacheFailed, \"%s\", log.BuildLogByMap(logMap))\n\t\t}\n\t}()\n\n\tparamsByte, err := json.Marshal(params)\n\tif err != nil {\n\t\tsetDegradeMethodDataErr = err\n\t\treturn\n\t}\n\n\tdataByte, err := json.Marshal(data)\n\tif err != nil {\n\t\tsetDegradeMethodDataErr = err\n\t\treturn\n\t}\n\n\tredis.SetRedisCache(ctx, methodName, paramsByte, consts.DegradeMethodRedisConfig, string(dataByte))\n}\n\n//FormatBffDriverInfo 组装bff司机信息\nfunc (baseController *BaseController) FormatBffDriverInfo(ctx context.Context, common bff.CommonStruct, login bff.LoginStruct) (driverInfo dto.BasicDriverInfo, formatBffDriverErr error) {\n\tdriverID, err := login.DriverID.Int64()\n\tif err != nil {\n\t\tformatBffDriverErr = err\n\t\treturn\n\t}\n\n\tlocationCityID, err := common.LocationCityID.Int64()\n\tif err != nil {\n\t\tareaInfo, err := third_proxy.GetDriverLocationCity(ctx, driverID)\n\t\tif err != nil {\n\t\t\tformatBffDriverErr = err\n\t\t\treturn\n\t\t}\n\t\tlocationCityID, err = util.Int2int64(int(areaInfo.Cityid))\n\t\tif err != nil {\n\t\t\tformatBffDriverErr = err\n\t\t\treturn\n\t\t}\n\t}\n\n\tcountryCode := common.LocationCountry\n\tif len(countryCode) == 0 {\n\t\tdriverSystemInfo, err := third_proxy.GetDriverInfo(ctx, driverID)\n\t\tif err != nil {\n\t\t\tformatBffDriverErr = err\n\t\t\treturn\n\t\t}\n\t\tcountryCode = driverSystemInfo.DriverBiz.CountryCode\n\t}\n\n\tlang := common.Lang\n\tif len(lang) == 0 {\n\t\tlang, err = localeutil.GetLanguageByCountry(countryCode)\n\t\tif err != nil {\n\t\t\tformatBffDriverErr = err\n\t\t\treturn\n\t\t}\n\t}\n\n\tlocale, err := localeutil.GetLocaleByCountry(countryCode)\n\tif err != nil {\n\t\tformatBffDriverErr = err\n\t\treturn\n\t}\n\n\tdriverInfo = dto.BasicDriverInfo{\n\t\tDriverId:    driverID,\n\t\tLang:        lang,\n\t\tCountryCode: countryCode,\n\t\tAppVersion:  common.AppVersion,\n\t\tAreaId:      locationCityID,\n\t\tCurrentArea: locationCityID,\n\t\tLocale:      locale,\n\t}\n\n\treturn\n}\n\n//GetBindStruct 获取bind对象\nfunc (baseController *BaseController) GetBindStruct(r *http.Request) binding.Binding {\n\tbinding.EnableDecoderUseNumber = true\n\treturn binding.Default(r.Method, r.Header.Get(\"Content-Type\"))\n}\n\n// 抽屉迁移过程中为避免第三方的double流量而写的与dive-app一致的缓存\nfunc (bc *BaseController) FormatAppDriverInfo(ctx context.Context, drawerReq *drawer.DrawerReq) (dto.BasicDriverInfo, error) {\n\n\tlogMap := map[string]interface{}{\n\t\tconsts.LogCallee: \"format_app_driver_info\",\n\t\t\"drawer_req\":     drawerReq,\n\t}\n\n\turanusGroup := \"UranusProxy::getDriverInfoByRedisCache\"\n\n\tcommonStruct := bff.CommonStruct{\n\t\tLang:            drawerReq.Common.Lang,\n\t\tLocationCityID:  drawerReq.Common.LocationCityId,\n\t\tLocationCountry: drawerReq.Common.LocationCountry,\n\t\tAppVersion:      drawerReq.Common.AppVersion,\n\t\tDataType:        drawerReq.Common.DataType,\n\t}\n\n\t// 获取司机的基础信息\n\tbasicDriverInfo, err := bc.FormatBffDriverInfo(ctx, commonStruct, drawerReq.Login)\n\tif err != nil {\n\t\tlogMap[consts.LogErrMsg] = err.Error()\n\t\tlog.Errorf(ctx, \"_format_bff_driver_info_failed\", \"%s\", log.BuildLogByMap(logMap))\n\t\treturn basicDriverInfo, err\n\t}\n\n\t// 减少dive-app请求locsvr获取locationCity的请求\n\tdrawerReq.Common.LocationCityId = json.Number(strconv.FormatInt(basicDriverInfo.AreaId, 10))\n\n\t// 先看有无缓存,有缓存则返回\n\t_, err = redis.GetAppRedisCache(ctx, uranusGroup, basicDriverInfo.DriverId)\n\tif err == nil {\n\t\treturn basicDriverInfo, nil\n\t}\n\n\t// 请求司机系统获取司机信息,因为在FormatBffDriverInfo中可能已经访问过司机系统，所以可保证最多访问一遍司机系统\n\tdriverSystemInfo, err := third_proxy.GetDriverInfo(ctx, basicDriverInfo.DriverId)\n\tif err != nil {\n\t\tlogMap[consts.LogErrMsg] = err.Error()\n\t\tlog.Errorf(ctx, \"request_driver_system_failed\", \"%s\", log.BuildLogByMap(logMap))\n\t\treturn basicDriverInfo, nil\n\t}\n\n\tdriverInfo := dto.DriverInfo{\n\t\tBasicDriverInfo: basicDriverInfo,\n\t\tWorkTime:        driverSystemInfo.DriverBiz.WorkTime,\n\t\tJoinModel:       driverSystemInfo.DriverBiz.JoinModel,\n\t\tCarLevel:        driverSystemInfo.DriverBiz.CarLevel,\n\t\tReceiveLevel:    bc.getReceiveLevel(ctx, driverSystemInfo),\n\t}\n\n\tbytes, err := json.Marshal(driverInfo)\n\tif err != nil {\n\t\tlogMap[consts.LogErrMsg] = err.Error()\n\t\tlog.Errorf(ctx, consts.JsonMarshalFailed, \"%s\", log.BuildLogByMap(logMap))\n\t\treturn basicDriverInfo, nil\n\t}\n\n\tredis.SetAppRedisCache(ctx, uranusGroup, driverInfo.DriverId, string(bytes))\n\n\treturn basicDriverInfo, nil\n}\n",
				str2: "package controller\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"git.xiaojukeji.com/Elvish/elvish-lib-golang/datetimeutil\"\n\t\"git.xiaojukeji.com/Elvish/elvish-lib-golang/localeutil\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/common/consts\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/common/dto\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/common/dto/bff\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/common/dto/drawer\"\n\tthirdProxyDto \"git.xiaojukeji.com/guarana/dive-app-g/common/dto/third_proxy\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/common/handlers/conf\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/common/handlers/copywriter\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/common/handlers/log\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/common/handlers/redis\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/common/util\"\n\tmiddleware2 \"git.xiaojukeji.com/guarana/dive-app-g/middleware\"\n\t\"git.xiaojukeji.com/guarana/dive-app-g/third_proxy\"\n\t\"git.xiaojukeji.com/nuwa/binding\"\n\t\"git.xiaojukeji.com/nuwa/golibs/httpserver\"\n\t\"git.xiaojukeji.com/nuwa/golibs/httpserver/middleware\"\n\t\"go.intra.xiaojukeji.com/platform-ha/onekey-degrade_sdk_go/degrade\"\n)\n\ntype BaseController struct {\n\thttpserver.BaseController\n}\n\nvar TicketErr = errors.New(\"ticket empty\")\n\nfunc (baseController *BaseController) CheckBasicDriverInfo(ctx context.Context, driverInfo dto.BasicDriverInfo) (dto.BasicDriverInfo, error) {\n\tlogMap := map[string]interface{}{\n\t\tconsts.LogCallee: \"check_driver_info\",\n\t\tconsts.LogParam:  driverInfo,\n\t}\n\tvar checkDriverInfoErr error\n\n\tdefer func() {\n\t\tif checkDriverInfoErr != nil {\n\t\t\tlogMap[consts.LogErrMsg] = checkDriverInfoErr.Error()\n\t\t\tlog.Trace.Errorf(ctx, consts.CheckDriverInfoFailed, \"%s\", log.BuildLogByMap(logMap))\n\t\t\treturn\n\t\t}\n\t}()\n\n\t//校验司机ID是否存在\n\tif driverInfo.DriverId == 0 {\n\t\tcheckDriverInfoErr = errors.New(\"driver_id not exist\")\n\t\treturn driverInfo, checkDriverInfoErr\n\t}\n\n\t//请求司机系统获取司机基础信息\n\tdriverSystemInfo, err := third_proxy.GetDriverInfo(ctx, driverInfo.DriverId)\n\tif err != nil {\n\t\tcheckDriverInfoErr = err\n\t\treturn driverInfo, checkDriverInfoErr\n\t}\n\n\tif driverInfo.CountryCode == \"\" { //如果国家码为空，则选择司机注册的国家\n\t\tdriverInfo.CountryCode = driverSystemInfo.DriverBiz.CountryCode\n\t}\n\n\t//获取司机注册城市\n\tdriverAreaIdInt, err := strconv.ParseInt(driverSystemInfo.DriverBiz.AreaId, 10, 64)\n\tif err != nil {\n\t\tcheckDriverInfoErr = err\n\t\treturn driverInfo, checkDriverInfoErr\n\t}\n\tdriverInfo.AreaId = driverAreaIdInt\n\n\t//如果没有locale，则根据国家码获取\n\tif driverInfo.Locale == \"\" {\n\t\tlocale, err := localeutil.GetLocaleByCountry(driverSystemInfo.DriverBiz.CountryCode)\n\t\tif err != nil {\n\t\t\tcheckDriverInfoErr = err\n\t\t\treturn driverInfo, checkDriverInfoErr\n\t\t}\n\t\tdriverInfo.Locale = locale\n\t}\n\n\t//如果没有lang，根据国家码获取\n\tif driverInfo.Lang == \"\" {\n\t\tlang, err := localeutil.GetLanguageByCountry(driverSystemInfo.DriverBiz.CountryCode)\n\t\tif err != nil {\n\t\t\tcheckDriverInfoErr = err\n\t\t\treturn driverInfo, checkDriverInfoErr\n\t\t}\n\t\tdriverInfo.Lang = lang\n\t}\n\n\t//如果定位城市为空，则根据司机当前定位城市获取\n\tif driverInfo.CurrentArea == 0 {\n\t\tareaInfo, err := third_proxy.GetDriverLocationCity(ctx, driverInfo.DriverId)\n\t\tif err != nil {\n\t\t\tcheckDriverInfoErr = err\n\t\t\treturn driverInfo, checkDriverInfoErr\n\t\t}\n\t\tareaId, err := util.Int2int64(int(areaInfo.Cityid))\n\t\tif err != nil {\n\t\t\tcheckDriverInfoErr = err\n\t\t\treturn driverInfo, checkDriverInfoErr\n\t\t}\n\t\tdriverInfo.CurrentArea = areaId\n\t}\n\n\treturn driverInfo, nil\n}\n\nfunc (baseController *BaseController) FormatH5DriverInfo(ctx *context.Context, r *http.Request, reqLang *string) (dto.DriverInfo, error) {\n\tlogMap := map[string]interface{}{\n\t\tconsts.LogCallee: \"format_h5_driver_info\",\n\t}\n\n\tvar driverInfo dto.DriverInfo\n\tvar formatDriverInfoErr error\n\n\tdefer func() {\n\t\tif formatDriverInfoErr != nil {\n\t\t\tlogMap[consts.LogErrMsg] = formatDriverInfoErr.Error()\n\t\t\tlog.Trace.Errorf(*ctx, consts.FormatDriverInfoFailed, \"%s\", log.BuildLogByMap(logMap))\n\t\t\treturn\n\t\t}\n\t}()\n\tvar err error\n\n\t//获取driver_id\n\tvar driverId int64\n\t//判断real_driver_id是否存在，不存在则请求passport\n\tdriverId = 0\n\tdriverIdStr := r.FormValue(\"real_driver_id\")\n\tif driverIdStr != \"\" {\n\t\tdriverId, err = strconv.ParseInt(driverIdStr, 10, 64)\n\t\tif err != nil {\n\t\t\tlog.Trace.Errorf(*ctx, consts.ParseFailed, \"%s\", log.BuildLogByMap(logMap))\n\t\t\tdriverId = 0\n\t\t}\n\t}\n\n\t//从请求中获取driver_id失败\n\tif driverId == 0 {\n\t\tticket := r.FormValue(\"ticket\")\n\t\tif ticket == \"\" {\n\t\t\tticket = r.FormValue(\"token\")\n\t\t}\n\n\t\tif ticket == \"\" {\n\t\t\tformatDriverInfoErr = TicketErr\n\t\t\treturn driverInfo, formatDriverInfoErr\n\t\t}\n\n\t\tvalidateResult, err := third_proxy.ValidateTicket(*ctx, ticket)\n\t\tif (err != nil) || (validateResult.Uid == nil) {\n\t\t\tformatDriverInfoErr = TicketErr\n\t\t\treturn driverInfo, formatDriverInfoErr\n\t\t}\n\n\t\tdriverId = *validateResult.Uid\n\t}\n\n\t//请求司机系统获取司机信息\n\tdriverSystemInfo, err := third_proxy.GetDriverInfo(*ctx, driverId)\n\tif err != nil {\n\t\tformatDriverInfoErr = err\n\t\treturn driverInfo, formatDriverInfoErr\n\t}\n\n\tappVersion := r.FormValue(\"appversion\")\n\n\t//获取定位的城市ID\n\tvar areaId int64\n\tvar utcOffset int32\n\tutcOffsetStr := r.FormValue(\"utc_offset\")\n\tareaIdStr := r.FormValue(\"location_cityid\")\n\t//如果未传入司机当前位置,查询locsvr\n\tif (areaIdStr == \"\") || (areaIdStr == \"0\") {\n\t\tareaInfo, err := third_proxy.GetDriverLocationCity(*ctx, driverId)\n\t\tif err != nil {\n\t\t\tformatDriverInfoErr = err\n\t\t\treturn driverInfo, formatDriverInfoErr\n\t\t}\n\t\tareaId, err = util.Int2int64(int(areaInfo.Cityid))\n\t\tif err != nil {\n\t\t\tformatDriverInfoErr = err\n\t\t\treturn driverInfo, formatDriverInfoErr\n\t\t}\n\t\tutcOffset = *areaInfo.TimeZone.UtcOffset\n\t} else {\n\t\t//格式异常，通过司机定位获取当前城市\n\t\tareaId, err = strconv.ParseInt(areaIdStr, 10, 64)\n\t\tif err != nil {\n\t\t\tareaInfo, err := third_proxy.GetDriverLocationCity(*ctx, driverId)\n\t\t\tif err != nil {\n\t\t\t\tformatDriverInfoErr = err\n\t\t\t\treturn driverInfo, formatDriverInfoErr\n\t\t\t}\n\t\t\tareaId, err = util.Int2int64(int(areaInfo.Cityid))\n\t\t\tif err != nil {\n\t\t\t\tformatDriverInfoErr = err\n\t\t\t\treturn driverInfo, formatDriverInfoErr\n\t\t\t}\n\t\t}\n\t\tutcOffsetInt, err := strconv.Atoi(utcOffsetStr)\n\t\tif err != nil {\n\t\t\tutcOffset = 0\n\t\t} else {\n\t\t\tutcOffset = int32(utcOffsetInt)\n\t\t}\n\t}\n\n\t//获取语言\n\tlang, ok := (*ctx).Value(middleware.LanguageKey).(string)\n\tif !ok || (len(lang) == 0) {\n\t\t//语言没有传入，默认使用账号归属的国家的语言\n\t\tlang, err = localeutil.GetLanguageByCountry(driverSystemInfo.DriverBiz.CountryCode)\n\t\tif err != nil {\n\t\t\tformatDriverInfoErr = err\n\t\t\treturn driverInfo, formatDriverInfoErr\n\t\t}\n\t}\n\t*reqLang = lang //赋值给外层\n\n\t//获取locale\n\tlocale := r.FormValue(\"locale\")\n\n\t//如果未传入locale，则使用国家码兜底\n\tif locale == \"\" {\n\t\tlocale, err = localeutil.GetLocaleByCountry(driverSystemInfo.DriverBiz.CountryCode)\n\t\tif err != nil {\n\t\t\tformatDriverInfoErr = err\n\t\t\treturn driverInfo, formatDriverInfoErr\n\t\t}\n\t}\n\n\t//获取电话\n\tvar cell string\n\tuserInfo, err := third_proxy.GetUserInfoByUid(*ctx, driverId)\n\tif err != nil {\n\t\tcell = \"\"\n\t} else {\n\t\tcell = *(userInfo.Cell)\n\t}\n\n\t//获取司机所在城市\n\tdriverAreaIdInt, err := strconv.ParseInt(driverSystemInfo.DriverBiz.AreaId, 10, 64)\n\tif err != nil {\n\t\tformatDriverInfoErr = err\n\t\treturn driverInfo, formatDriverInfoErr\n\t}\n\n\tcurrentLocalTime, err := datetimeutil.FormatSimple(areaId, time.Now().Unix(), datetimeutil.STYLE_YMDHMS.Pattern)\n\tif err != nil {\n\t\tformatDriverInfoErr = err\n\t\treturn driverInfo, formatDriverInfoErr\n\t}\n\thelpInfo := map[string]interface{}{\n\t\t\"driver_id\":          driverId,\n\t\t\"current_local_time\": currentLocalTime,\n\t}\n\t*ctx = context.WithValue(*ctx, middleware2.HelpInfoKey, helpInfo)\n\n\treturn dto.DriverInfo{\n\t\tBasicDriverInfo: dto.BasicDriverInfo{\n\t\t\tDriverId:    driverId,\n\t\t\tLang:        lang,\n\t\t\tAreaId:      driverAreaIdInt,\n\t\t\tAppVersion:  appVersion,\n\t\t\tLocale:      locale,\n\t\t\tCountryCode: driverSystemInfo.DriverBiz.CountryCode,\n\t\t\tCurrentArea: areaId,\n\t\t},\n\t\tWorkTime:     driverSystemInfo.DriverBiz.WorkTime,\n\t\tJoinModel:    driverSystemInfo.DriverBiz.JoinModel,\n\t\tCarLevel:     driverSystemInfo.DriverBiz.CarLevel,\n\t\tReceiveLevel: baseController.getReceiveLevel(*ctx, driverSystemInfo),\n\t\tPhone:        cell,\n\t\tCurrentUtc:   utcOffset,\n\t}, nil\n}\n\nfunc (baseController *BaseController) getReceiveLevel(ctx context.Context, driverSystemInfo thirdProxyDto.DriverInfoForSystem) []string {\n\tvar calLevel []string\n\tvar receiveLevel []string\n\tvar levelModel []string\n\tif driverSystemInfo.DriverBiz.CarLevel != \"\" {\n\t\tcalLevel = strings.Split(driverSystemInfo.DriverBiz.CarLevel, \",\")\n\t}\n\tif driverSystemInfo.DriverBiz.ReceiveLevel != \"\" {\n\t\treceiveLevel = strings.Split(driverSystemInfo.DriverBiz.ReceiveLevel, \",\")\n\t}\n\tif driverSystemInfo.DriverBiz.LevelModeSwitch != \"\" {\n\t\tlevelModeInfo := make(map[string]interface{})\n\t\terr := json.Unmarshal([]byte(driverSystemInfo.DriverBiz.LevelModeSwitch), &levelModeInfo)\n\t\tif err == nil {\n\t\t\tif _, ok := levelModeInfo[\"level\"]; ok {\n\t\t\t\tlevelByte, err := json.Marshal(levelModeInfo[\"level\"])\n\t\t\t\tif err == nil {\n\t\t\t\t\terr = json.Unmarshal(levelByte, &levelModel)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tlog.PrintLogInfo(ctx, err, consts.JsonUnMarshalFailed, log.UnPrintTag, make(map[string]interface{}))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tresult := append(calLevel, receiveLevel...)\n\tresult = append(result, levelModel...)\n\treturn util.SliceUnique(result)\n}\n\nfunc (baseController *BaseController) GetH5RespByErrno(ctx context.Context, errno int, data interface{}, lang string) dto.Response {\n\tvar errMsg string\n\tvar err error\n\tif _, ok := consts.I18nRespMsg[errno]; ok {\n\t\terrMsgKey := consts.I18nRespMsg[errno]\n\t\terrMsg, err = copywriter.GetWriterByKey(ctx, errMsgKey, lang)\n\t\tif err == nil {\n\t\t\treturn dto.Response{\n\t\t\t\tErrno:  errno,\n\t\t\t\tErrMsg: errMsg,\n\t\t\t\tData:   data,\n\t\t\t}\n\t\t} else {\n\t\t\terrno = consts.RespFailedCode\n\t\t}\n\t}\n\n\terrMsg = \"\"\n\tif _, ok := consts.RespMsg[errno]; ok {\n\t\terrMsg = consts.RespMsg[errno]\n\t}\n\n\treturn dto.Response{\n\t\tErrno:  errno,\n\t\tErrMsg: errMsg,\n\t\tData:   data,\n\t}\n}\n\nfunc (baseController *BaseController) GetRespByErrno(errno int, data interface{}) dto.Response {\n\tvar errMsg string\n\n\terrMsg = \"\"\n\tif _, ok := consts.RespMsg[errno]; ok {\n\t\terrMsg = consts.RespMsg[errno]\n\t}\n\n\treturn dto.Response{\n\t\tErrno:  errno,\n\t\tErrMsg: errMsg,\n\t\tData:   data,\n\t}\n}\n\nfunc (baseController *BaseController) ReturnH5Resp(ctx context.Context, w http.ResponseWriter, r *http.Request, data map[string]interface{}, errno int, lang string) {\n\tif lang == \"\" { //为空默认使用英语\n\t\tlang = \"en_us\"\n\t}\n\n\thelpInfo := ctx.Value(middleware2.HelpInfoKey)\n\tif helpInfo != nil {\n\t\tdata[\"help_info\"] = helpInfo\n\t}\n\n\tbaseController.EchoJSON(w, r, baseController.GetH5RespByErrno(ctx, errno, data, lang))\n}\n\nfunc (baseController *BaseController) ReturnResp(w http.ResponseWriter, r *http.Request, data interface{}, errno int) {\n\tbaseController.EchoJSON(w, r, baseController.GetRespByErrno(errno, data))\n}\n\nfunc (baseController *BaseController) DegradeControllerMethod(ctx context.Context, methodName string) bool {\n\tlogMap := map[string]interface{}{\n\t\tconsts.LogCallee: \"degrade_controller_method\",\n\t\t\"method_name\":    methodName,\n\t\t\"is_limit\":       \"activity_method_is_limited\",\n\t}\n\tvar degradeMethodErr error\n\n\tdefer func() {\n\t\tif degradeMethodErr != nil {\n\t\t\tlogMap[consts.LogErrMsg] = degradeMethodErr.Error()\n\t\t\tlog.Trace.Errorf(ctx, consts.DegradeMethodFailed, \"%s\", log.BuildLogByMap(logMap))\n\t\t}\n\t}()\n\n\tvar contextLimit = degrade.NewContext()\n\tinitDegradeErr := contextLimit.Add(degrade.METHOD, methodName)\n\tif initDegradeErr != nil {\n\t\tdegradeMethodErr = initDegradeErr\n\t\treturn false\n\t}\n\n\tinitDegradeErr = contextLimit.Add(degrade.USN, consts.DiveAppDefaultUsn)\n\tif initDegradeErr != nil {\n\t\tdegradeMethodErr = initDegradeErr\n\t\treturn false\n\t}\n\n\tinitDegradeErr = contextLimit.Add(degrade.SID, consts.DiveAppDefaultPid)\n\tif initDegradeErr != nil {\n\t\tdegradeMethodErr = initDegradeErr\n\t\treturn false\n\t}\n\n\tlimitNode := conf.Viper.GetString(\"degrade.limit_node\")\n\tisLimit, err := degrade.RateLimitAllow(limitNode, contextLimit)\n\tif err != nil {\n\t\tdegradeMethodErr = err\n\t\treturn false\n\t}\n\n\treturn !isLimit\n\n}\n\nfunc (baseController *BaseController) SetDegradeMethodDataCache(ctx context.Context, methodName string, params interface{}, data interface{}) {\n\tlogMap := map[string]interface{}{\n\t\tconsts.LogCallee: \"set_degrade_method_data_cache\",\n\t\t\"method_name\":    methodName,\n\t\tconsts.LogParam:  params,\n\t}\n\tvar setDegradeMethodDataErr error\n\tdefer func() {\n\t\tif setDegradeMethodDataErr != nil {\n\t\t\tlogMap[consts.LogErrMsg] = setDegradeMethodDataErr.Error()\n\t\t\tlog.Trace.Errorf(ctx, consts.SetDegradeMethodDataCacheFailed, \"%s\", log.BuildLogByMap(logMap))\n\t\t}\n\t}()\n\n\tparamsByte, err := json.Marshal(params)\n\tif err != nil {\n\t\tsetDegradeMethodDataErr = err\n\t\treturn\n\t}\n\n\tdataByte, err := json.Marshal(data)\n\tif err != nil {\n\t\tsetDegradeMethodDataErr = err\n\t\treturn\n\t}\n\n\tredis.SetRedisCache(ctx, methodName, paramsByte, consts.DegradeMethodRedisConfig, string(dataByte))\n}\n\n//FormatBffDriverInfo 组装bff司机信息\nfunc (baseController *BaseController) FormatBffDriverInfo(ctx context.Context, common bff.CommonStruct, login bff.LoginStruct) (driverInfo dto.BasicDriverInfo, formatBffDriverErr error) {\n\tdriverID, err := login.DriverID.Int64()\n\tif err != nil {\n\t\tformatBffDriverErr = err\n\t\treturn\n\t}\n\n\tlocationCityID, err := common.LocationCityID.Int64()\n\tif err != nil {\n\t\tareaInfo, err := third_proxy.GetDriverLocationCity(ctx, driverID)\n\t\tif err != nil {\n\t\t\tformatBffDriverErr = err\n\t\t\treturn\n\t\t}\n\t\tlocationCityID, err = util.Int2int64(int(areaInfo.Cityid))\n\t\tif err != nil {\n\t\t\tformatBffDriverErr = err\n\t\t\treturn\n\t\t}\n\t}\n\n\tcountryCode := common.LocationCountry\n\tif len(countryCode) == 0 {\n\t\tdriverSystemInfo, err := third_proxy.GetDriverInfo(ctx, driverID)\n\t\tif err != nil {\n\t\t\tformatBffDriverErr = err\n\t\t\treturn\n\t\t}\n\t\tcountryCode = driverSystemInfo.DriverBiz.CountryCode\n\t}\n\n\tlang := common.Lang\n\tif len(lang) == 0 {\n\t\tlang, err = localeutil.GetLanguageByCountry(countryCode)\n\t\tif err != nil {\n\t\t\tformatBffDriverErr = err\n\t\t\treturn\n\t\t}\n\t}\n\n\tlocale, err := localeutil.GetLocaleByCountry(countryCode)\n\tif err != nil {\n\t\tformatBffDriverErr = err\n\t\treturn\n\t}\n\n\tdriverInfo = dto.BasicDriverInfo{\n\t\tDriverId:    driverID,\n\t\tLang:        lang,\n\t\tCountryCode: countryCode,\n\t\tAppVersion:  common.AppVersion,\n\t\tAreaId:      locationCityID,\n\t\tCurrentArea: locationCityID,\n\t\tLocale:      locale,\n\t}\n\n\treturn\n}\n\n//GetBindStruct 获取bind对象\nfunc (baseController *BaseController) GetBindStruct(r *http.Request) binding.Binding {\n\tbinding.EnableDecoderUseNumber = true\n\treturn binding.Default(r.Method, r.Header.Get(\"Content-Type\"))\n}\n\n// 抽屉迁移过程中为避免第三方的double流量而写的与dive-app一致的缓存\nfunc (bc *BaseController) FormatAppDriverInfo(ctx context.Context, drawerReq *drawer.DrawerReq) (dto.BasicDriverInfo, error) {\n\n\tlogMap := map[string]interface{}{\n\t\tconsts.LogCallee: \"format_app_driver_info\",\n\t\t\"drawer_req\":     drawerReq,\n\t}\n\n\turanusGroup := \"UranusProxy::getDriverInfoByRedisCache\"\n\tbasicDriverInfo := dto.BasicDriverInfo{}\n\n\tdriverId, err := drawerReq.Login.DriverID.Int64()\n\tif err != nil {\n\t\treturn basicDriverInfo, err\n\t}\n\n\t// 先看有无缓存,有就unmarshal，返回\n\tcacheData, err := redis.GetAppRedisCache(ctx, uranusGroup, driverId)\n\tif err == nil {\n\t\terr := json.Unmarshal([]byte(cacheData), &basicDriverInfo)\n\t\tif err == nil {\n\t\t\treturn basicDriverInfo, nil\n\t\t}\n\t\tlogMap[\"err_msg\"] = err.Error()\n\t\tlog.Errorf(ctx, consts.JsonUnMarshalFailed, \"%s\", log.BuildLogByMap(logMap))\n\t}\n\n\tcommonStruct := bff.CommonStruct{\n\t\tLang:            drawerReq.Common.Lang,\n\t\tLocationCityID:  drawerReq.Common.LocationCityId,\n\t\tLocationCountry: drawerReq.Common.LocationCountry,\n\t\tAppVersion:      drawerReq.Common.AppVersion,\n\t\tDataType:        drawerReq.Common.DataType,\n\t}\n\n\t// 获取司机的基础信息\n\tbasicDriverInfo, err = bc.FormatBffDriverInfo(ctx, commonStruct, drawerReq.Login)\n\tif err != nil {\n\t\treturn basicDriverInfo, err\n\t}\n\n\t// 减少dive-app请求locsvr获取locationCity的请求\n\tdrawerReq.Common.LocationCityId = json.Number(strconv.FormatInt(basicDriverInfo.AreaId, 10))\n\n\t// 请求司机系统获取司机信息\n\tdriverSystemInfo, err := third_proxy.GetDriverInfo(ctx, basicDriverInfo.DriverId)\n\tif err != nil {\n\t\tlogMap[consts.LogErrMsg] = err.Error()\n\t\tlog.Errorf(ctx, \"request_driver_system_failed\", \"%s\", log.BuildLogByMap(logMap))\n\t\treturn basicDriverInfo, nil\n\t}\n\n\tdriverInfo := dto.DriverInfo{\n\t\tBasicDriverInfo: basicDriverInfo,\n\t\tWorkTime:        driverSystemInfo.DriverBiz.WorkTime,\n\t\tJoinModel:       driverSystemInfo.DriverBiz.JoinModel,\n\t\tCarLevel:        driverSystemInfo.DriverBiz.CarLevel,\n\t\tReceiveLevel:    bc.getReceiveLevel(ctx, driverSystemInfo),\n\t}\n\n\tbytes, err := json.Marshal(driverInfo)\n\tif err != nil {\n\t\tlogMap[consts.LogErrMsg] = err.Error()\n\t\tlog.Errorf(ctx, consts.JsonMarshalFailed, \"%s\", log.BuildLogByMap(logMap))\n\t\treturn basicDriverInfo, nil\n\t}\n\n\tredis.SetAppRedisCache(ctx, uranusGroup, driverInfo.DriverId, string(bytes))\n\n\treturn basicDriverInfo, nil\n}\n",
			},
			want: nil,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := GetLineMap(tt.args.str1, tt.args.str2); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("GetLineMap() = %v, want %v", got, tt.want)
			}
		})
	}
}
